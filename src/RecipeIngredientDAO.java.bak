//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : RecipeIngredientDAO.java
//  @ Date : 2014-05-13
//  @ Author : 
import java.sql.*;


public class RecipeIngredientDAO 
{
	private Connection conn;

	public RecipeIngredientDAO() 
	{
		connect();
	}
	private void connect() 
	{
		DBConnectionPool obj = DBConnectionPool.getInstance();
		try
		{
			conn =obj.getConnection();	
		}
		catch (SQLException e)
		{
			System.out.println(e.getMessage());
		}
	}
	public void disconnect() 
	{
		try
		{
			if(conn != null)
			{
				conn.close();
				System.out.println("DB와의 접속을 끊었습니다.");
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
	}
	
	public RecipeIngredientDTO selectMaxRecipeIngredientCode() 
	{
		RecipeIngredientDTO info = null;
		PreparedStatement pstmt = null;
		
		try
		{
			
			String sql = "select * from RecipeIngredient_tb where recipeIngredientCode = (select MAX(recipeIngredientCode) from RecipeIngredient_tb)";
			
			pstmt = conn.prepareStatement(sql);
			
			ResultSet rs = pstmt.executeQuery();
			
			while(rs.next())
			{
				
				int recipeIngredientCode1 = rs.getInt("recipeIngredientCode");
				int ingredientCode = rs.getInt("ingredientCode");
				int recipeCode = rs.getInt("recipeCode");
				int recipeIngredientNum = rs.getInt("recipeIngredientNum");
				
				info = new RecipeIngredientDTO(recipeIngredientCode1,ingredientCode,recipeCode,recipeIngredientNum);
				
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null)
					pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return info;
	
	}
	
	public int insert(int recipeIngredientCode, int ingredientCode, int recipeCode, int recipeIngredientNum) 
	{
		int rowNum = 0;
		Statement stmt = null;
		try
		{
			stmt = conn.createStatement();
			rowNum = stmt.executeUpdate("insert into recipeingredient_tb values("+recipeIngredientCode+","+ingredientCode+","+recipeCode+","+recipeIngredientNum+")");
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	public RecipeIngreInfoDTOList selectIngre()
	{
		RecipeIngreInfoDTO info = null;
		Statement stmt = null;
		RecipeIngreInfoDTOList list = new RecipeIngreInfoDTOList();

		try
		{
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select a.foodCode,a.foodName,d.ingredientCode,d.ingredientName,c.RecipeIngredientNum from food_tb a,recipe_tb b,recipeIngredient_tb c,ingredient_tb d where a.foodcode = b.foodcode and b.recipecode = c.recipecode and c.ingredientcode = d.ingredientCode order by a.foodCode");
			while(rs.next())
			{
				int foodCode = rs.getInt("foodcode");
				String foodName = rs.getString("foodName");
				int ingredientCode = rs.getInt("ingredientCode");
				String ingredientName = rs.getString("ingredientName");
				int recipeIngredientNum = rs.getInt("recipeIngredientNum");
				
				info = new RecipeIngreInfoDTO(foodCode,foodName,ingredientName,ingredientCode,recipeIngredientNum);
				list.addRecipeIngreInfoList(info);
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return list;
	}
	
	public RecipeIngredientList selectAll() 
	{
		RecipeIngredientDTO info = null;
		Statement stmt = null;
		RecipeIngredientList list = new RecipeIngredientList();

		try
		{
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from recipeingredient_tb");
			while(rs.next())
			{
				int recipeIngredientCode = rs.getInt("recipeIngredientCode");
				int ingredientCode = rs.getInt("ingredientCode");
				int recipeCode = rs.getInt("recipeCode");
				int recipeIngredientNum = rs.getInt("recipdeIngredientNum");
				
				info = new RecipeIngredientDTO(recipeIngredientCode,ingredientCode,recipeCode,recipeIngredientNum);
				list.addRecipeIngredientList(info);
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return list;
		
	}
	
	public RecipeIngredientDTO selectRecipeIngredientCode(int recipeIngredientCode) 
	{
		RecipeIngredientDTO info = null;
		Statement stmt = null;
		
		try
		{
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from recipeIngredient_tb where recipeingredientCode = "+recipeIngredientCode+"");
			while(rs.next())
			{
				int recipeIngredientCode1 = rs.getInt("recipeIngredientCode");
				int ingredientCode = rs.getInt("ingredientCode");
				int recipeCode = rs.getInt("recipeCode");
				int recipeIngredientNum = rs.getInt("recipdeIngredientNum");
				
				info = new RecipeIngredientDTO(recipeIngredientCode1,ingredientCode,recipeCode,recipeIngredientNum);
				
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return info;
	
	}
	
	public RecipeIngredientList selectIngredientCode(int ingredientCode) 
	{
		RecipeIngredientDTO info = null;
		Statement stmt = null;
		RecipeIngredientList list = new RecipeIngredientList();

		try
		{
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from recipeingredient_tb where ingredientCode = "+ingredientCode+"");
			while(rs.next())
			{
				int recipeIngredientCode = rs.getInt("recipeIngredientCode");
				int ingredientCode1 = rs.getInt("ingredientCode");
				int recipeCode = rs.getInt("recipeCode");
				int recipeIngredientNum = rs.getInt("recipdeIngredientNum");
				
				info = new RecipeIngredientDTO(recipeIngredientCode,ingredientCode1,recipeCode,recipeIngredientNum);
				list.addRecipeIngredientList(info);
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return list;
	
	}
	
	public RecipeIngredientList selectRecipeCode(int recipeCode)
	{
		RecipeIngredientDTO info = null;
		Statement stmt = null;
		RecipeIngredientList list = new RecipeIngredientList();

		try
		{
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from recipeingredient_tb where recipeCode = "+recipeCode+"");
			while(rs.next())
			{
				int recipeIngredientCode = rs.getInt("recipeIngredientCode");
				int ingredientCode = rs.getInt("ingredientCode");
				int recipeCode1 = rs.getInt("recipeCode");
				int recipeIngredientNum = rs.getInt("recipdeIngredientNum");
				
				info = new RecipeIngredientDTO(recipeIngredientCode,ingredientCode,recipeCode1,recipeIngredientNum);
				list.addRecipeIngredientList(info);
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return list;
	
	}
	
	public RecipeIngredientList selectRecipeIngredientNum(int recipeIngredientNum) 
	{
		RecipeIngredientDTO info = null;
		Statement stmt = null;
		RecipeIngredientList list = new RecipeIngredientList();

		try
		{
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from recipeingredient_tb where recipeIngredientNum = "+recipeIngredientNum+"");
			while(rs.next())
			{
				int recipeIngredientCode = rs.getInt("recipeIngredientCode");
				int ingredientCode = rs.getInt("ingredientCode");
				int recipeCode = rs.getInt("recipeCode");
				int recipeIngredientNum1 = rs.getInt("recipdeIngredientNum");
				
				info = new RecipeIngredientDTO(recipeIngredientCode,ingredientCode,recipeCode,recipeIngredientNum1);
				list.addRecipeIngredientList(info);
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return list;
	
	}
	
	public int updateAll(int recipeIngredientCode, int ingredientCode, int recipeCode, int recipeIngredientNum)
	{
		int res = 0;
		Statement stmt = null;
		try
		{
			stmt = conn.createStatement();
			res = stmt.executeUpdate("update recipeIngredient_tb set ingredientCode = "+ingredientCode+",recipeCode = "+recipeCode+",recipeIngredientNum = "+recipeIngredientNum+" where recipeIngredientCode = "+recipeIngredientCode+"");
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return res;
	
	
	}
	
	public int updateIngredientCode(int recipeIngredientCode, int ingredientCode) 
	{
		int res = 0;
		Statement stmt = null;
		try
		{
			stmt = conn.createStatement();
			res = stmt.executeUpdate("update recipeIngredient_tb set ingredientCode = "+ingredientCode+" where recipeIngredientCode = "+recipeIngredientCode+")");
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return res;
	
	}
	
	public int updateRecipeCode(int recipeIngredientCode, int recipeCode) 
	{
		int res = 0;
		Statement stmt = null;
		try
		{
			stmt = conn.createStatement();
			res = stmt.executeUpdate("update recipeIngredient_tb set recipeCode = "+recipeCode+" where recipeIngredientCode = "+recipeIngredientCode+"");
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return res;
	
	}
	
	public int updateRecipeIngredientNum(int recipeIngredientCode, int recipeIngredientNum) 
	{
		int res = 0;
		Statement stmt = null;
		try
		{
			stmt = conn.createStatement();
			res = stmt.executeUpdate("update recipeIngredient_tb set recipeIngredientNum = "+recipeIngredientNum+" where recipeIngredientCode = "+recipeIngredientCode+"");
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return res;
	
	}
	
	public int deleteAll() 
	{
		int res = 0;
		Statement stmt = null;
		try
		{
			stmt = conn.createStatement();
			res = stmt.executeUpdate("delete from recipeIngredient_tb ");
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return res;
		
	}
	public int deleteRecipeIngredientCode(int recipeIngredientCode) 
	{
		int res = 0;
		Statement stmt = null;
		try
		{
			stmt = conn.createStatement();
			res = stmt.executeUpdate("delete from recipeIngredient_tb where recipeIngredientCode = "+recipeIngredientCode+"");
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return res;
	
	}
	public int deleteIngredientCode(int ingredientCode) 
	{
		int res = 0;
		Statement stmt = null;
		try
		{
			stmt = conn.createStatement();
			res = stmt.executeUpdate("delete from recipeIngredient_tb where ingredientCode = "+ingredientCode+"");
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return res;
	
	}
	public int deleteRecipeCode(int recipeCode) 
	{
		int res = 0;
		Statement stmt = null;
		try
		{
			stmt = conn.createStatement();
			res = stmt.executeUpdate("delete from recipeIngredient_tb where recipeCode = "+recipeCode+"");
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return res;
	
	}
	public int deleteRecipeIngredientNum(int recipeIngredientNum) 
	{
		int res = 0;
		Statement stmt = null;
		try
		{
			stmt = conn.createStatement();
			res = stmt.executeUpdate("delete from recipeIngredient_tb where recipeIngredientNum = "+recipeIngredientNum+"");
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return res;
	
	}

	//------------------------------------------------------ get/set ----------
	
	public Connection getConn() 
	{
		return conn;
	
	}
	public void setConn(Connection conn) 
	{
		this.conn = conn;
	}
}
