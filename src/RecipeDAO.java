//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : RecipeDAO.java
//  @ Date : 2014-05-13
//  @ Author : 
//
//


import java.util.*;
import java.sql.*;

public class RecipeDAO {
	private Connection conn;
	public RecipeDAO() {
		DBConnectionPool obj = DBConnectionPool.getInstance();
		try
		{
			conn =obj.getConnection();	
			System.out.println("연결이 성공적으로 이루어졌습니다.");
		}
		catch (SQLException e)
		{
			System.out.println(e.getMessage());
		}
	}
	
	public Connection getConn() {
		return this.conn;
	}
	
	
	public void disconnect() {
		try
		{
			if(conn != null)
			{
				conn.close();
				System.out.println("DB와 접속을 끊었습니다.");
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
	}
	
	public int insert(int recipeCode, int recipeTime, String tip, String recipeLevel, int portion, int foodCode) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "INSERT INTO recipe_tb (recipeCode,recipeTime,tip,recipeLevel,portion,foodCode)VALUES(?,?,?,?,?,?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,recipeCode);
			pstmt.setInt(2,recipeTime);
			pstmt.setString(3,tip);
			pstmt.setString(4,recipeLevel);
			pstmt.setInt(5,portion);
			pstmt.setInt(6,foodCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt !=null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public RecipeList selectAll() {
		RecipeList recipeList = new RecipeList();
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT recipeCode,recipeTime,tip,recipeLevel,portion,foodCode FROM recipe_tb";
			pstmt = conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int recipeCode = rs.getInt("recipeCode");
				int recipeTime = rs.getInt("recipeTime");
				String tip = rs.getString("tip");
				String recipeLevel = rs.getString("recipeLevel");
				int portion = rs.getInt("portion");
				int foodCode = rs.getInt("foodCode");

				recipeList.addRecipeList(new RecipeDTO(recipeCode,recipeTime,tip,recipeLevel,portion,foodCode));
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return recipeList;
	}
	
	public RecipeDTO selectRecipeCode(int recipeCode) {
		RecipeDTO recipeDTO = null;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT recipeCode,recipeTime,tip,recipeLevel,portion,foodCode FROM recipe_tb WHERE recipeCode = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,recipeCode);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int rCode = rs.getInt("recipeCode");
				int recipeTime = rs.getInt("recipeTime");
				String tip = rs.getString("tip");
				String recipeLevel = rs.getString("recipeLevel");
				int portion = rs.getInt("portion");
				int foodCode = rs.getInt("foodCode");

				recipeDTO = new RecipeDTO(rCode,recipeTime,tip,recipeLevel,portion,foodCode);
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return recipeDTO;
	}
	
	public RecipeList selectRecipeTime(int recipeTime) {
		RecipeList recipeList = new RecipeList();
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT recipeCode,recipeTime,tip,recipeLevel,portion,foodCode FROM recipe_tb WHERE recipeTime=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,recipeTime);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int recipeCode = rs.getInt("recipeCode");
				int rTime = rs.getInt("recipeTime");
				String tip = rs.getString("tip");
				String recipeLevel = rs.getString("recipeLevel");
				int portion = rs.getInt("portion");
				int foodCode = rs.getInt("foodCode");

				recipeList.addRecipeList(new RecipeDTO(recipeCode,rTime,tip,recipeLevel,portion,foodCode));
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return recipeList;
	}
	
	public RecipeDTO selectTip(String tip) {
		RecipeDTO recipeDTO = null;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT recipeCode,recipeTime,tip,recipeLevel,portion,foodCode FROM recipe_tb WHERE tip = ? ";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,tip);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int recipeCode = rs.getInt("recipeCode");
				int recipeTime = rs.getInt("recipeTime");
				String t = rs.getString("tip");
				String recipeLevel = rs.getString("recipeLevel");
				int portion = rs.getInt("portion");
				int foodCode = rs.getInt("foodCode");

				recipeDTO = new RecipeDTO(recipeCode,recipeTime,t,recipeLevel,portion,foodCode);
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return recipeDTO;
	}
	
	public RecipeList selectRecipeLevel(String recipeLevel) {
		RecipeList recipeList = new RecipeList();
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT recipeCode,recipeTime,tip,recipeLevel,portion,foodCode FROM recipe_tb WHERE recipeLevel=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,recipeLevel);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int recipeCode = rs.getInt("recipeCode");
				int recipeTime = rs.getInt("recipeTime");
				String tip = rs.getString("tip");
				String rLevel = rs.getString("recipeLevel");
				int portion = rs.getInt("portion");
				int foodCode = rs.getInt("foodCode");

				recipeList.addRecipeList(new RecipeDTO(recipeCode,recipeTime,tip,rLevel,portion,foodCode));
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return recipeList;
	}
	
	public RecipeList selectPortion(int portion) {
		RecipeList recipeList = new RecipeList();
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT recipeCode,recipeTime,tip,recipeLevel,portion,foodCode FROM recipe_tb WHERE portion=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,portion);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int recipeCode = rs.getInt("recipeCode");
				int recipeTime = rs.getInt("recipeTime");
				String tip = rs.getString("tip");
				String recipeLevel = rs.getString("recipeLevel");
				int ption = rs.getInt("portion");
				int foodCode = rs.getInt("foodCode");

				recipeList.addRecipeList(new RecipeDTO(recipeCode,recipeTime,tip,recipeLevel,ption,foodCode));
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return recipeList;
	}
	
	public RecipeList selectFoodCode(int foodCode) {
		RecipeList recipeList = new RecipeList();
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT recipeCode,recipeTime,tip,recipeLevel,portion,foodCode FROM recipe_tb WHERE foodCode=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,foodCode);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int recipeCode = rs.getInt("recipeCode");
				int recipeTime = rs.getInt("recipeTime");
				String tip = rs.getString("tip");
				String recipeLevel = rs.getString("recipeLevel");
				int portion = rs.getInt("portion");
				int fCode = rs.getInt("foodCode");

				recipeList.addRecipeList(new RecipeDTO(recipeCode,recipeTime,tip,recipeLevel,portion,fCode));
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return recipeList;
	}
	
	public int updateAll(int recipeCode, int recipeTime, String tip, String recipeLevel, int portion, int foodCode) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "UPDATE recipe_tb SET recipeTime=?,tip=?,recipeLevel=?,portion=?,foodCode=? WHERE recipeCode = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,recipeTime);
			pstmt.setString(2,tip);
			pstmt.setString(3,recipeLevel);
			pstmt.setInt(4,portion);
			pstmt.setInt(5,foodCode);
			pstmt.setInt(6,recipeCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int updateRecipeTime(int recipeCode, int recipeTime) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "UPDATE recipe_tb SET recipeTime=? WHERE recipeCode = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,recipeTime);
			pstmt.setInt(2,recipeCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int updateTip(int recipeCode, String tip) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "UPDATE recipe_tb SET tip=? WHERE recipeCode = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,tip);
			pstmt.setInt(2,recipeCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int updateRecipeLevel(int recipeCode, String recipeLevel) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "UPDATE recipe_tb SET recipeLevel=? WHERE recipeCode = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,recipeLevel);
			pstmt.setInt(2,recipeCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int updatePortion(int recipeCode, int portion) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "UPDATE recipe_tb SET portion=? WHERE recipeCode = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,portion);
			pstmt.setInt(2,recipeCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int updateFoodCode(int recipeCode, int foodCode) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "UPDATE recipe_tb SET foodCode=? WHERE recipeCode = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,foodCode);
			pstmt.setInt(2,recipeCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deleteAll() {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipe_tb";
			pstmt = conn.prepareStatement(sql);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deleteRecipeCode(int recipeCode) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipe_tb WHERE recipeCode =? ";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,recipeCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deleteRecipeTime(int recipeTime) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipe_tb WHERE recipeTime =? ";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,recipeTime);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deleteTip(String tip) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipe_tb WHERE tip =? ";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,tip);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deleteRecipeLevel(String recipeLevel) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipe_tb WHERE recipeLevel =? ";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,recipeLevel);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deletePortion(int portion) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipe_tb WHERE portion =? ";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,portion);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deleteFoodCode(int foodCode) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipe_tb WHERE foodCode =? ";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,foodCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
}
