//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : RegisterController.java
//  @ Date : 2014-04-29
//  @ Author : 
//
//


import javax.swing.*;
import java.awt.event.*;

public class RegisterDBController {
	public FoodInfo foodInfo;
	public RecipeInfo recipeInfo;
	public RegisterDBController() 
	{
		this(new JTextField(),new JTextField(),new JTextField(),new JTextArea(),new JTextField(),new JTextField(),
			new JComboBox<String>(),new JTextField(), new JTextArea());	
	}
	
	public RegisterDBController(JTextField foodName, JTextField foodCalorie, JTextField foodPhoto, JTextArea foodIntro, JTextField cookingTotalTime, JTextField portion, JComboBox<String> levelComboBox, JTextField totalIngredient, JTextArea tip)throws NumberFormatException
	{
		String name = foodName.getText();
		String intro = foodIntro.getText();
		String photo = foodPhoto.getText();

		int calorie = Integer.parseInt(foodCalorie.getText());				//열량
		int totalTime = Integer.parseInt(cookingTotalTime.getText());		//전체시간
		String tipText = tip.getText();										//팁
		int portionNum = Integer.parseInt(portion.getText());				//분량
		TempRecipeIngreInfoList.setFoodName(name);							//임시 레시피 리스트 의 이름 변경	
		//여기서 먼저 static 클래스의 나중코드 값중 최고값을 가져와야함.
		//1.foodDAO에서 가장 큰 코드값을 리턴.
		
		FoodDAO obj = new FoodDAO();
		int code = obj.selectMaxFoodCode().getFoodCode();
	
		obj.disconnect();
		TempRecipeIngreInfoList.setFoodCode(Integer.toString(code+1));//임시 레시피의 코드 부여
		//foodInfo 객체를 만든다.
		
		this.foodInfo = new FoodInfo(TempRecipeIngreInfoList.getFoodCode(),name,intro,photo,calorie);
		//recipeInfo 객체를 만든다.
		this.recipeInfo = 
			new RecipeInfo(name,totalTime,tipText,portionNum,Level.valueOf(levelComboBox.getSelectedItem().toString()),
			TempRecipeIngreInfoList.getFoodCode(),
			new CookingCourseList(TempCookingCourseList.getCookingCourseList(),foodName.getText(),TempRecipeIngreInfoList.getFoodCode()),
			new RecipeIngreInfoList(foodName.getText(),TempRecipeIngreInfoList.getFoodCode(),TempRecipeIngreInfoList.getRecipeIngreInfoList()));
	}
	public void register() {

		//먼저 등록할 코드를 가져옴
		//Static에 저장
		FoodRecipeInfo obj = new FoodRecipeInfo(foodInfo,recipeInfo);
		FoodRecipeInfoList.addFoodRecipeInfoList(obj);
		
		
		//***DB에 저장
		//1. Food_tb에 저장
		
		FoodDAO fDao = new FoodDAO();		//food_tb과 연결
		fDao.insert(Integer.parseInt(foodInfo.getFoodCode()),foodInfo.getFoodName(),		//food_tb에 insert
			foodInfo.getFoodIntro(),foodInfo.getFoodPhoto(),foodInfo.getFoodCalorie(),"administrator");
		fDao.disconnect();					//food_tb와 연결 해제
		
		//2. Recipe_tb에 저장
		System.out.println(333);
		RecipeDAO rDao = new RecipeDAO();	//recipe_tb와 연결
		rDao.insert(Integer.parseInt(foodInfo.getFoodCode()),recipeInfo.getCookingTotalTime(),//recipe_tb에 insert
			recipeInfo.getTip(),recipeInfo.getLevel().toString(),
			recipeInfo.getPortion(),Integer.parseInt(foodInfo.getFoodCode()));
		System.out.println(444);
		rDao.disconnect();					//recipe_tb와 연결 해제
		//3. RecipeCourse_tv에 저장
		
		CookingCourseList list = recipeInfo.getCookingCourseList();		//조리과정 리스트를 가져옴
		System.out.println(555);
		RecipeCourseDAO rcDao = new RecipeCourseDAO();			//recipeCourse_tb와 연결
		int i=1;							//조리과정 단계를 위한 i변수.
		for(CookingCourse temp : list.getCookingCourseList())
		{
			rcDao.insert(i,Integer.parseInt(foodInfo.getFoodCode()),temp.getCookingPhoto(),temp.getCookingTime(),temp.getCookingInst());
			i++;
		}		
		System.out.println(666);
		rcDao.disconnect();										//recipeCourse_tb와 연결 해제			
		//4. RecipeIngredient_tb에 저장
		System.out.println(777);
		RecipeIngredientDAO riDao = new RecipeIngredientDAO();	//recipeIngredient_tb와 연결
		System.out.println(888);
		IngredientDAO idDao = new IngredientDAO();				//ingredient_tb와 연결
		
		int recipeIngredientCode=0;		//조리재료 코드
		int ingredientCode= 0;		//재료 코드
		RecipeIngreInfoList riList = recipeInfo.getRecipeIngreInfoList();//재료 목록을 가져옴

		recipeIngredientCode = riDao.selectMaxRecipeIngredientCode().getRecipeIngredientCode()+1;//가장 최근의 조리재료코드의 +1을 하여 조리재료 코드 생성
		int j=1;
		for(RecipeIngreInfo temp : riList.getRecipeIngreInfoList())
		{	
			if(idDao.seleteName(temp.getIngredientName())  == null)//등록할 재료가 재료 테이블에 없다면
			{
				ingredientCode = idDao.selectMaxIngredientCode().getIngredientCode()+1;//가장 최근의 재료 코드값 +1 을 하여 새로운 재료 코드 생성
				idDao.insert(ingredientCode,temp.getIngredientName(),"개");			//재료 테이블에 새로운 재료 정보를 추가		
			}
			else	//등록할 재료가 재료 테이블에 있다면
			{
				ingredientCode = idDao.seleteName(temp.getIngredientName()).getIngredientCode();//있는 재료의 코드 값을 가져온다.
			}

			riDao.insert(recipeIngredientCode+j,ingredientCode,Integer.parseInt(foodInfo.getFoodCode()),temp.getIngredientNum());	
			j++;	
		}

		riDao.disconnect();										//recipeIngredient_tb와 연결해제
		idDao.disconnect();										//ingredient_tb와 연결해제

		
	
		

	}
	
	public FoodInfo getFoodInfo() 
	{
		return this.foodInfo;
	}
	
	public RecipeInfo getRecipeInfo() 
	{
		return this.recipeInfo;
	}
	
	public void setFoodInfo(FoodInfo foodInfo)
	{
		this.foodInfo = foodInfo;
	}
	
	public void setRecipeInfo(RecipeInfo recipeInfo) 
	{
		this.recipeInfo = recipeInfo;	
	}
}
