//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : TempCookingCourseList.java
//  @ Date : 2014-04-29
//  @ Author : 
//
//



import java.util.*;


public class TempCookingCourseList {
	private static Collection<CookingCourse> cookingCourseList;
	private static String foodName;
	private static String foodCode;

	
	static
	{
		cookingCourseList= new LinkedList<CookingCourse>();
		foodName="";
		foodCode="";
	}
	
	public static Collection<CookingCourse> getCookingCourseList() {
		return cookingCourseList;
	}
	
	public static String getFoodName() {
	return foodName;
	}
	
	public static String getFoodCode() {
	return foodCode;
	}
	
	public static void setCookingCourseList(Collection<CookingCourse> list) {
	cookingCourseList=cookingCourseList;
	}
	
	public static void setFoodName(String foodName) {
	foodName=foodName;
	}
	
	public static void setFoodCode(String foodCode) {
	foodCode=foodCode;
	}
	
	public static CookingCourse searchCookingCourse(int step) {
	try
		{
			return ((LinkedList<CookingCourse>)cookingCourseList).get(step);
		}
		catch (IndexOutOfBoundsException iooe)
		{
			return null;
		}
	}
	
	public static CookingCourse addCookingCourse(CookingCourse cookingCourse) {
	cookingCourseList.add(cookingCourse);
		return cookingCourse;
	}
	
	public static CookingCourse addCookingCourse(String cookingPhoto, int cookingTime, String cookingInst)
	{
		CookingCourse cookingCourse=new CookingCourse(cookingPhoto,cookingTime,cookingInst);
		cookingCourseList.add(cookingCourse);
		return cookingCourse;
	}
	
	public static CookingCourse searchCookingCourse(CookingCourse cookingCourse) {
	int i=0;
		for(CookingCourse tmp:cookingCourseList)
		{
			if(tmp.getCookingPhoto().equals(cookingCourse.getCookingPhoto()))
			{
				if(tmp.getCookingTime()==cookingCourse.getCookingTime())
				{
					if(tmp.getCookingInst().equals(cookingCourse.getCookingInst()))
					{
						break;
					}
				}
			}
			i++;
		}
		if(i>cookingCourseList.size())
			return null;
		else
			return ((LinkedList<CookingCourse>)cookingCourseList).get(i);
	}
	
	public static CookingCourse removeCookingCourse(CookingCourse cookingCourse) {
	CookingCourse tmp=searchCookingCourse(cookingCourse);
		if(cookingCourseList.remove(tmp))
		{
			return tmp;
		}
		else
		{
			return null;
		}
	}
	
	public static CookingCourse removeCookingCourse(int step) {
	
		CookingCourse tmp=searchCookingCourse(step);
		if(cookingCourseList.remove(tmp))
		{
			return tmp;
		}
		else
		{
			return null;
		}
	}
	
	public static CookingCourse reviseCookingCourse(CookingCourse searchData, CookingCourse reviseData) {
	int i=0;
		for(CookingCourse tmp:cookingCourseList)
		{
			if(tmp.getCookingPhoto().equals(searchData.getCookingPhoto()))
			{
				if(tmp.getCookingTime()==searchData.getCookingTime())
				{
					if(tmp.getCookingInst().equals(searchData.getCookingInst()))
					{
						((LinkedList<CookingCourse>)cookingCourseList).set(i,reviseData);
						return reviseData;
					}
				}
			}
			i++;
		}
		return null;
	}
	
	public static CookingCourse reviseCookingCourseList(int step, CookingCourse reviseData) {
	try
		{
			return ((LinkedList<CookingCourse>)cookingCourseList).set(step,reviseData);	
		}
		catch (IndexOutOfBoundsException e)
		{
			return null;
		}
	}
}
