//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : RecipeCourseDAO.java
//  @ Date : 2014-05-13
//  @ Author : 장성봉
//
//


import java.util.*;
import java.sql.*;
public class RecipeCourseDAO {
	private Connection conn;
	public RecipeCourseDAO() {
		connect();
	}
	public void setConn(Connection conn)
	{
		this.conn = conn;
	}
	public Connection getConn() {
		return this.conn;
	}
	private void connect()
	{
		DBConnectionPool obj = DBConnectionPool.getInstance();
		try
		{
			conn =obj.getConnection();	
			System.out.println("연결이 성공적으로 이루어졌습니다.");
		}
		catch (SQLException e)
		{
			System.out.println(e.getMessage());
		}
	}
	public void disconnect() {
		try
		{
			if(conn != null)
			{
				conn.close();
				System.out.println("DB와 접속을 끊었습니다.");
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
	}
	
	public int insert(int courseLevel, int recipeCode, String recipeCoursePhoto, int recipeCourseTime, String recipeCourseIntro) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "INSERT INTO recipeCourse_tb (courselevel,recipecode,recipeCoursePhoto,recipeCourseTime,recipeCourseIntro)VALUES(?,?,?,?,?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,courseLevel);
			pstmt.setInt(2,recipeCode);
			pstmt.setString(3,recipeCoursePhoto);
			pstmt.setInt(4,recipeCourseTime);
			pstmt.setString(5,recipeCourseIntro);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt !=null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	public CourseList selectCourse()
	{
		CourseDTO info = null;
		Statement stmt = null;
		CourseList list = new CourseList();

		try
		{
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select a.foodcode,a.foodname,c.recipecoursephoto,c.recipecoursetime,c.recipecourseIntro from food_tb a,recipe_tb b,recipeCourse_tb c where a.foodcode = b.foodcode and b.recipeCode = c.recipecode order by recipecoursephoto");
			while(rs.next())
			{
				int foodCode = rs.getInt("foodCode");
				String foodName = rs.getString("foodName");
				String recipeCoursePhoto = rs.getString("recipeCoursePhoto");
				int recipeCourseTime = rs.getInt("recipeCourseTime");
				String recipeCourseIntro = rs.getString("recipeCourseIntro");

				info = new CourseDTO(foodCode,foodName,recipeCoursePhoto,recipeCourseTime,recipeCourseIntro);
				list.addCourseList(info);
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(stmt != null)
					stmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return list;

	}
	
	public RecipeCourseList selectAll() {
		RecipeCourseList recipeCourseList = new RecipeCourseList();
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT courseLevel,recipeCode,recipeCoursePhoto,recipeCourseTime,recipeCourseIntro FROM recipeCourse_tb";
			pstmt = conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int courseLevel = rs.getInt("courseLevel");
				int recipeCode = rs.getInt("recipeCode");
				String recipeCoursePhoto = rs.getString("recipeCoursePhoto");
				int recipeCourseTime = rs.getInt("recipeCourseTime");
				String recipeCourseIntro = rs.getString("recipeCourseIntro");

				recipeCourseList.addRecipeCourseList(new RecipeCourseDTO(courseLevel,recipeCode,recipeCoursePhoto,recipeCourseTime,recipeCourseIntro));
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return recipeCourseList;
	}
	
	public RecipeCourseDTO selectCourseLevelRecipeCode(int courseLevel, int recipeCode) {
		RecipeCourseDTO recipeCourseDTO = null;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT courseLevel,recipeCode,recipeCoursePhoto,recipeCourseTime,recipeCourseIntro FROM recipeCourse_tb WHERE courseLevel = ? AND recipeCode = ?";;
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,courseLevel);
			pstmt.setInt(2,recipeCode);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int cLevel = rs.getInt("courseLevel");
				int rCode = rs.getInt("recipeCode");
				String recipeCoursePhoto = rs.getString("recipeCoursePhoto");
				int recipeCourseTime = rs.getInt("recipeCourseTime");
				String recipeCourseIntro = rs.getString("recipeCourseIntro");

				recipeCourseDTO = new RecipeCourseDTO(cLevel,rCode,recipeCoursePhoto,recipeCourseTime,recipeCourseIntro);
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return recipeCourseDTO;
	}
	
	public RecipeCourseList selectCourseLevel(int courseLevel) {
		RecipeCourseList recipeCourseList = new RecipeCourseList();
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT courseLevel,recipeCode,recipeCoursePhoto,recipeCourseTime,recipeCourseIntro FROM recipeCourse_tb WHERE courseLevel = ?";;
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,courseLevel);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int cLevel = rs.getInt("courseLevel");
				int recipeCode = rs.getInt("recipeCode");
				String recipeCoursePhoto = rs.getString("recipeCoursePhoto");
				int recipeCourseTime = rs.getInt("recipeCourseTime");
				String recipeCourseIntro = rs.getString("recipeCourseIntro");

				recipeCourseList.addRecipeCourseList(new RecipeCourseDTO(cLevel,recipeCode,recipeCoursePhoto,recipeCourseTime,recipeCourseIntro));
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
			return recipeCourseList;
	}
	
	public RecipeCourseList selectRecipeCode(int recipeCode) {
		RecipeCourseList recipeCourseList = new RecipeCourseList();
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT courseLevel,recipeCode,recipeCoursePhoto,recipeCourseTime,recipeCourseIntro FROM recipeCourse_tb WHERE recipeCode = ?";;
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,recipeCode);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int courseLevel = rs.getInt("courseLevel");
				int rCode = rs.getInt("recipeCode");
				String recipeCoursePhoto = rs.getString("recipeCoursePhoto");
				int recipeCourseTime = rs.getInt("recipeCourseTime");
				String recipeCourseIntro = rs.getString("recipeCourseIntro");

				recipeCourseList.addRecipeCourseList(new RecipeCourseDTO(courseLevel,rCode,recipeCoursePhoto,recipeCourseTime,recipeCourseIntro));
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
			return recipeCourseList;
	}
	
	public RecipeCourseDTO selectRecipeCoursePhoto(String recipeCoursePhoto) {
		RecipeCourseDTO recipeCourseDTO = new RecipeCourseDTO();
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT courseLevel,recipeCode,recipeCoursePhoto,recipeCourseTime,recipeCourseIntro FROM recipeCourse_tb WHERE recipeCoursePhoto = ?";;
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,recipeCoursePhoto);
		
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int courseLevel = rs.getInt("courseLevel");
				int recipeCode = rs.getInt("recipeCode");
				String rCPhoto = rs.getString("recipeCoursePhoto");
				int recipeCourseTime = rs.getInt("recipeCourseTime");
				String recipeCourseIntro = rs.getString("recipeCourseIntro");

				recipeCourseDTO = new RecipeCourseDTO(courseLevel,recipeCode,rCPhoto,recipeCourseTime,recipeCourseIntro);
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return recipeCourseDTO;
	}
	
	public RecipeCourseList selectRecipeCourseTime(int recipeCourseTime) {
		RecipeCourseList recipeCourseList = new RecipeCourseList();
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT courseLevel,recipeCode,recipeCoursePhoto,recipeCourseTime,recipeCourseIntro FROM recipeCourse_tb WHERE recipeCourseTime = ?";;
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,recipeCourseTime);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int courseLevel = rs.getInt("courseLevel");
				int recipeCode = rs.getInt("recipeCode");
				String recipeCoursePhoto = rs.getString("recipeCoursePhoto");
				int rCTime = rs.getInt("recipeCourseTime");
				String recipeCourseIntro = rs.getString("recipeCourseIntro");

				recipeCourseList.addRecipeCourseList(new RecipeCourseDTO(courseLevel,recipeCode,recipeCoursePhoto,rCTime,recipeCourseIntro));
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
			return recipeCourseList;
	}
	
	public RecipeCourseDTO selectRecipeCourseIntro(String recipeCourseIntro) {
		RecipeCourseDTO recipeCourseDTO = new RecipeCourseDTO();
		PreparedStatement pstmt = null;
		try
		{
			String sql = "SELECT courseLevel,recipeCode,recipeCoursePhoto,recipeCourseTime,recipeCourseIntro FROM recipeCourse_tb WHERE recipeCourseIntro = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,recipeCourseIntro);
		
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int courseLevel = rs.getInt("courseLevel");
				int recipeCode = rs.getInt("recipeCode");
				String recipeCoursePhoto = rs.getString("recipeCoursePhoto");
				int recipeCourseTime = rs.getInt("recipeCourseTime");
				String rCIntro = rs.getString("recipeCourseIntro");

				recipeCourseDTO = new RecipeCourseDTO(courseLevel,recipeCode,recipeCoursePhoto,recipeCourseTime,rCIntro);
			}
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt  != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return recipeCourseDTO;
	}
	
	public int updateAll(int courseLevel, int recipeCode, String recipeCoursePhoto, int recipeCourseTime, String recipeCourseIntro) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "UPDATE recipeCourse_tb SET recipeCoursePhoto=?,recipeCourseTime=?,recipeCourseIntro=? WHERE courseLevel = ? AND recipeCode = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,recipeCoursePhoto);
			pstmt.setInt(2,recipeCourseTime);
			pstmt.setString(3,recipeCourseIntro);
			pstmt.setInt(4,courseLevel);
			pstmt.setInt(5,recipeCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int updateRecipeCoursePhoto(int courseLevel, int recipeCode, String recipeCoursePhoto) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "UPDATE recipeCourse_tb SET recipeCoursePhoto=? WHERE courseLevel = ? AND recipeCode = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,recipeCoursePhoto);
			pstmt.setInt(2,courseLevel);
			pstmt.setInt(3,recipeCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int updateRecipeCourseTime(int courseLevel, int recipeCode, int recipeCourseTime) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "UPDATE recipeCourse_tb SET recipeCourseTime=? WHERE courseLevel = ? AND recipeCode = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,recipeCourseTime);
			pstmt.setInt(2,courseLevel);
			pstmt.setInt(3,recipeCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int updateRecipeCourseIntro(int courseLevel, int recipeCode, String recipeCourseIntro) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "UPDATE recipeCourse_tb SET recipeCourseIntro=? WHERE courseLevel = ? AND recipeCode = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,recipeCourseIntro);
			pstmt.setInt(2,courseLevel);
			pstmt.setInt(3,recipeCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deleteAll() {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipeCourse_tb";
			pstmt = conn.prepareStatement(sql);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deleteCourseLevel(int courseLevel) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipeCourse_tb WHERE courseLevel = ? ";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,courseLevel);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deleteRecipeCode(int recipeCode) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipeCourse_tb WHERE recipeCode = ? ";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,recipeCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deleteCourseLevelRecipeCode(int courseLevel, int recipeCode) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipeCourse_tb WHERE courseLevel = ? AND recipeCode= ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,courseLevel);
			pstmt.setInt(2,recipeCode);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deleteRecipeCourseTime(int recipeCourseTime) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipeCourse_tb WHERE recipeCourseTime = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,recipeCourseTime);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deleteRecipeCourseIntro(String recipeCourseIntro) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipeCourse_tb WHERE recipeCourseIntro = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,recipeCourseIntro);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
	
	public int deleteRecipeCoursePhoto(String recipeCoursePhoto) {
		int rowNum = 0;
		PreparedStatement pstmt = null;
		try
		{
			String sql = "DELETE FROM recipeCourse_tb WHERE recipeCoursePhoto = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,recipeCoursePhoto);
			rowNum = pstmt.executeUpdate();
		}
		catch (SQLException se)
		{
			System.out.println(se.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		finally
		{
			try
			{
				if(pstmt != null) pstmt.close();
			}
			catch (SQLException se)
			{
				System.out.println(se.getMessage());
			}
		}
		return rowNum;
	}
}
